/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package gui;

import bean.User;
import service.UsrService;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;

/**
 *
 * @author Aealen
 */
public class UsrManageUI extends javax.swing.JFrame {
    private UsrService usrService;
    private User user;
    /** Creates new form UsrManageUI */
    public UsrManageUI() {
        usrService=new UsrService();
        user=new User();
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("学生活动管理系统丨用户管理");
        this.setSize(600,450);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        UsrIDLabel = new javax.swing.JLabel();
        UsrIDText = new javax.swing.JTextField();
        DelUsrBt = new javax.swing.JButton();
        EditUsrBt = new javax.swing.JButton();
        UsrNameLabel = new javax.swing.JLabel();
        UsrNameText = new javax.swing.JTextField();
        UsrPwdLabel1 = new javax.swing.JLabel();
        UsrPwdText1 = new javax.swing.JTextField();
        UsrBeAdminLabel = new javax.swing.JLabel();
        BeAdminCombox = new javax.swing.JComboBox<>();
        QueryUsrBt = new javax.swing.JButton();
        AddUsrBt = new javax.swing.JButton();
        AdminMenu = new javax.swing.JMenuBar();
        ActMenu = new javax.swing.JMenu();
        UsrQueryAct = new javax.swing.JMenuItem();
        UsrEditAct = new javax.swing.JMenuItem();
        UsrMenu = new javax.swing.JMenu();
        UsrQuitSystem = new javax.swing.JMenuItem();
        ActManagementMenu = new javax.swing.JMenu();
        AddAct = new javax.swing.JMenuItem();
        editAct = new javax.swing.JMenuItem();
        UsrManagementMenu = new javax.swing.JMenu();
        UsrManagement = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        DefaultTableModel model = new javax.swing.table.DefaultTableModel(
                new Object[][]{

                },
                new String[]{
                        "UID", "UsrName", "UsrPwd", "isAdmin", "last_login"
                }
        ) {
            Class[] types = new Class[]{
                    java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                    false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };

        jTable1.setModel(model);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(2);
        }
/**
 * 在打开用户管理页面的时候先显示所有用户信息
 */
        {   List<User> userList=new ArrayList<User>();
            userList = usrService.queryUser();
            model.setRowCount(0);
            for (int i = 0; i < userList.size(); i++) {
                model.addRow(new Object[]{
                        userList.get(i).getId(),
                        userList.get(i).getName(),
                        userList.get(i).getPwd(),
                        userList.get(i).getIsAdmin(),
                        userList.get(i).getLast_login()});
            }
        }
        UsrIDLabel.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        UsrIDLabel.setForeground(new java.awt.Color(255, 51, 51));
        UsrIDLabel.setText("UsrID:");

        UsrIDText.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        UsrIDText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsrIDTextActionPerformed(evt);
            }
        });

        DelUsrBt.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        DelUsrBt.setText("删除用户");
        DelUsrBt.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                user=usrService.queryUserById(UsrIDText.getText()).get(0);
                if(usrService.delUsr(user)){
                    JOptionPane.showMessageDialog(null,"用户成功删除!!");
                    List<User> userList=new ArrayList<User>();
                    userList = usrService.queryUser();
                    model.setRowCount(0);
                    for (int i = 0; i < userList.size(); i++) {
                        model.addRow(new Object[]{
                                userList.get(i).getId(),
                                userList.get(i).getName(),
                                userList.get(i).getPwd(),
                                userList.get(i).getIsAdmin(),
                                userList.get(i).getLast_login()});
                    }
                }else {
                JOptionPane.showMessageDialog(null,"删除用户操作发生错误,删除失败!!");

                }
            }
        });

        EditUsrBt.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        EditUsrBt.setText("更新信息");
        EditUsrBt.addActionListener(new ActionListener() {
            /**
             * 通过按ID查找对临时User 赋值
             * 将新的数据提交给User  然后user  再向UseService 提交信息
             */
            @Override
            public void actionPerformed(ActionEvent e) {
                user=usrService.queryUserById(UsrIDText.getText()).get(0);
                if (UsrNameText.getText().length()!=0)
                user.setName(UsrNameText.getText());
                if (UsrPwdText1.getText().length()!=0)
                user.setPwd(UsrPwdText1.getText());
                user.setIsAdmin(String.valueOf(BeAdminCombox.getSelectedIndex()));
                if (usrService.modUsrInfo(user)){
                    JOptionPane.showMessageDialog(null,"信息更新成功!!");
                    List<User> userList=new ArrayList<User>();
                    userList = usrService.queryUser();
                    model.setRowCount(0);
                    for (int i = 0; i < userList.size(); i++) {
                        model.addRow(new Object[]{
                                userList.get(i).getId(),
                                userList.get(i).getName(),
                                userList.get(i).getPwd(),
                                userList.get(i).getIsAdmin(),
                                userList.get(i).getLast_login()});
                    }
                }else {
                    JOptionPane.showMessageDialog(null,"信息修改失败!!");
                }
            }
        });

        UsrNameLabel.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        UsrNameLabel.setText("UsrName:");

        UsrNameText.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        UsrNameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsrNameTextActionPerformed(evt);
            }
        });

        UsrPwdLabel1.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        UsrPwdLabel1.setText("UsrPwd:");

        UsrPwdText1.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        UsrPwdText1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsrPwdText1ActionPerformed(evt);
            }
        });

        UsrBeAdminLabel.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        UsrBeAdminLabel.setText("BeAdmin:");

        BeAdminCombox.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        BeAdminCombox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"普通用户", "管理员", "全部"}));
        BeAdminCombox.setSelectedIndex(2);




        QueryUsrBt.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        QueryUsrBt.setText("查找用户");
        QueryUsrBt.addActionListener(new ActionListener() {
            @Override
            /**
             * 查询用户操作
             * 可以使用ID查询 Name  查询      用户类型查询  或者全不选进行全部输出
             * @param e
             */
            public void actionPerformed(ActionEvent e) {
                List<User> userList =new ArrayList<User>();
                if (UsrIDText.getText().length()==0) {
                    //ID为空
                    if (UsrNameText.getText().length()==0){
                        //ID 姓名都为空
                        if (BeAdminCombox.getSelectedIndex()!=2) {
                            //Combox 选项不为0 即非全部查询  使用用户类型查询查询
                            userList=usrService.queryUserByType(String.valueOf(BeAdminCombox.getSelectedIndex()));
                            model.setRowCount(0);
                            for (int i = 0; i <userList.size() ; i++) {
                                model.addRow(new Object[]{
                                        userList.get(i).getId(),
                                        userList.get(i).getName(),
                                        userList.get(i).getPwd(),
                                        userList.get(i).getIsAdmin(),
                                        userList.get(i).getLast_login()});
                            }
                        }else{
                            //Combox 选项为0  全部查询
                            userList=usrService.queryUser();
                            model.setRowCount(0);
                            for (int i = 0; i <userList.size() ; i++) {
                                model.addRow(new Object[]{
                                        userList.get(i).getId(),
                                        userList.get(i).getName(),
                                        userList.get(i).getPwd(),
                                        userList.get(i).getIsAdmin(),
                                        userList.get(i).getLast_login()});
                            }
                        }
                    }else {
                        //ID为空 姓名不为空  使用姓名查询
                        userList=usrService.queryUserByName(UsrNameText.getText());
                        model.setRowCount(0);
                        for (int i = 0; i <userList.size() ; i++) {
                            model.addRow(new Object[]{
                                    userList.get(i).getId(),
                                    userList.get(i).getName(),
                                    userList.get(i).getPwd(),
                                    userList.get(i).getIsAdmin(),
                                    userList.get(i).getLast_login()});
                        }
                    }
                }else {
                    //ID 不为空  使用ID查询
                    userList=usrService.queryUserById(UsrIDText.getText());
                    model.setRowCount(0);
                    for (int i = 0; i <userList.size() ; i++) {
                        model.addRow(new Object[]{
                                userList.get(i).getId(),
                                userList.get(i).getName(),
                                userList.get(i).getPwd(),
                                userList.get(i).getIsAdmin(),
                                userList.get(i).getLast_login()});
                    }
                }

            }
        });

        AddUsrBt.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        AddUsrBt.setText("添加用户");
        AddUsrBt.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //分 输入了ID 和没输入ID
                //输入了ID 先判断此ID 是否存在 存在 不创建  不存在创建
                //没输入ID  则默认自增创建
                if (UsrIDText.getText().length()!=0){
                    //输入了ID
                    user.setId(UsrIDText.getText());
                    user.setName(UsrNameText.getText());
                    user.setPwd(UsrPwdText1.getText());
                    user.setIsAdmin(String.valueOf(BeAdminCombox.getSelectedIndex()));
                    if (usrService.addUsr(user,1)){
                        JOptionPane.showMessageDialog(null,"添加用户成功!!");
                        List<User> userList=new ArrayList<User>();
                        userList = usrService.queryUser();
                        model.setRowCount(0);
                        for (int i = 0; i < userList.size(); i++) {
                            model.addRow(new Object[]{
                                    userList.get(i).getId(),
                                    userList.get(i).getName(),
                                    userList.get(i).getPwd(),
                                    userList.get(i).getIsAdmin(),
                                    userList.get(i).getLast_login()});
                        }
                    }else {
                        JOptionPane.showMessageDialog(null,"删除用户操作发生错误,请检查输入!!");
                    }


                }else{
                    //没输入ID  自增
                    user.setName(UsrNameText.getText());
                    user.setPwd(UsrPwdText1.getText());
                    user.setIsAdmin(String.valueOf(BeAdminCombox.getSelectedIndex()));

                    if (usrService.addUsr(user,0)){
                        JOptionPane.showMessageDialog(null,"添加用户成功!!");
                        List<User> userList=new ArrayList<User>();
                        userList = usrService.queryUser();
                        model.setRowCount(0);
                        for (int i = 0; i < userList.size(); i++) {
                            model.addRow(new Object[]{
                                    userList.get(i).getId(),
                                    userList.get(i).getName(),
                                    userList.get(i).getPwd(),
                                    userList.get(i).getIsAdmin(),
                                    userList.get(i).getLast_login()});
                        }
                    }else {
                        JOptionPane.showMessageDialog(null,"删除用户操作发生错误,请检查输入!!");
                    }
                }

            }
        });
        ActMenu.setText("活动");

        UsrQueryAct.setText("活动查询");
        UsrQueryAct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsrQueryActActionPerformed(evt);
            }
        });
        ActMenu.add(UsrQueryAct);

        UsrEditAct.setText("活动编辑");
        UsrEditAct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsrEditActActionPerformed(evt);

            }
        });
        ActMenu.add(UsrEditAct);

        AdminMenu.add(ActMenu);

        UsrMenu.setText("用户");

        UsrQuitSystem.setText("注销");
        UsrQuitSystem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsrQuitSystemActionPerformed(evt);
            }
        });
        UsrMenu.add(UsrQuitSystem);

        AdminMenu.add(UsrMenu);

        ActManagementMenu.setText("活动管理");

        AddAct.setText("新增活动");
        AddAct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActActionPerformed(evt);
            }
        });
        ActManagementMenu.add(AddAct);

        editAct.setText("编辑活动");
        editAct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActActionPerformed(evt);
            }
        });
        ActManagementMenu.add(editAct);

        AdminMenu.add(ActManagementMenu);

        UsrManagementMenu.setText("用户管理");

        UsrManagement.setText("用户管理");
        UsrManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsrManagementActionPerformed(evt);
            }
        });
        UsrManagementMenu.add(UsrManagement);

        AdminMenu.add(UsrManagementMenu);

        setJMenuBar(AdminMenu);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1)
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(32, 32, 32)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(UsrIDLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 74, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(UsrIDText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(UsrNameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 93, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(UsrNameText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(layout.createSequentialGroup()
                            .add(8, 8, 8)
                            .add(UsrPwdLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(UsrPwdText1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                            .add(UsrBeAdminLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 93, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(BeAdminCombox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 131, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(DelUsrBt)
                    .add(EditUsrBt)
                    .add(AddUsrBt)
                    .add(QueryUsrBt))
                .add(116, 116, 116))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 123, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(UsrIDLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(UsrIDText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(QueryUsrBt))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(UsrNameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(UsrNameText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(AddUsrBt))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(UsrPwdLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(UsrPwdText1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(DelUsrBt))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(UsrBeAdminLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(BeAdminCombox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(EditUsrBt))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void UsrQueryActActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsrQueryActActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new QueryActUI().setVisible(true);
    }//GEN-LAST:event_UsrQueryActActionPerformed

    private void UsrEditActActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsrEditActActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new EditActUI().setVisible(true);
    }//GEN-LAST:event_UsrEditActActionPerformed

    private void UsrQuitSystemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsrQuitSystemActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new LoginUI().setVisible(true);
    }//GEN-LAST:event_UsrQuitSystemActionPerformed

    private void AddActActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new AdminAddActUI().setVisible(true);
    }//GEN-LAST:event_AddActActionPerformed

    private void editActActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new AdminEditActUI().setVisible(true);
    }//GEN-LAST:event_editActActionPerformed

    private void UsrManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsrManagementActionPerformed
        // TODO add your handling code here:
        //this.dispose();
        //new UsrManageUI().setVisible(true);
    }//GEN-LAST:event_UsrManagementActionPerformed

    private void UsrIDTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsrIDTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UsrIDTextActionPerformed

    private void UsrNameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsrNameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UsrNameTextActionPerformed

    private void UsrPwdText1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsrPwdText1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UsrPwdText1ActionPerformed


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UsrManageUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UsrManageUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UsrManageUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UsrManageUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UsrManageUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu ActManagementMenu;
    private javax.swing.JMenu ActMenu;
    private javax.swing.JMenuItem AddAct;
    private javax.swing.JButton AddUsrBt;
    private javax.swing.JMenuBar AdminMenu;
    private javax.swing.JComboBox<String> BeAdminCombox;
    private javax.swing.JButton DelUsrBt;
    private javax.swing.JButton EditUsrBt;
    private javax.swing.JButton QueryUsrBt;
    private javax.swing.JLabel UsrBeAdminLabel;
    private javax.swing.JMenuItem UsrEditAct;
    private javax.swing.JLabel UsrIDLabel;
    private javax.swing.JTextField UsrIDText;
    private javax.swing.JMenuItem UsrManagement;
    private javax.swing.JMenu UsrManagementMenu;
    private javax.swing.JMenu UsrMenu;
    private javax.swing.JLabel UsrNameLabel;
    private javax.swing.JTextField UsrNameText;
    private javax.swing.JLabel UsrPwdLabel1;
    private javax.swing.JTextField UsrPwdText1;
    private javax.swing.JMenuItem UsrQueryAct;
    private javax.swing.JMenuItem UsrQuitSystem;
    private javax.swing.JMenuItem editAct;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

}
