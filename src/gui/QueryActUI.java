/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package gui;

import bean.Activity;
import bean.User;
import service.ActService;
import service.UsrActService;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Aealen
 */
public class QueryActUI extends javax.swing.JFrame {
    ActService actService;
    User user;
    UsrActService usrActService;
    /** Creates new form QueryActUI */
    public QueryActUI() {
        actService=new ActService();
        user=new User();
        usrActService=new UsrActService();
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("学生活动管理系统丨活动查询");
        this.setSize(600,450);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AdminActTableScroll = new javax.swing.JScrollPane();
        ActShowTable = new javax.swing.JTable();
        QueryActIDLabel = new javax.swing.JLabel();
        QueryActIDText = new javax.swing.JTextField();
        QueryActNameLabel = new javax.swing.JLabel();
        QueryActNameText = new javax.swing.JTextField();
        QueryActTimeLabel = new javax.swing.JLabel();
        QueryActTimeText = new javax.swing.JTextField();
        QueryActStatusLabel = new javax.swing.JLabel();
        QueryActStatusCombox = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        AdminMenu = new javax.swing.JMenuBar();
        UsrEditAct = new javax.swing.JMenu();
        UsrQueryAct = new javax.swing.JMenuItem();
        UsrQuitAct = new javax.swing.JMenuItem();
        UsrMenu = new javax.swing.JMenu();
        UsrQuitSystem = new javax.swing.JMenuItem();
        ActManagementMenu = new javax.swing.JMenu();
        AddAct = new javax.swing.JMenuItem();
        editAct = new javax.swing.JMenuItem();
        UsrManagementMenu = new javax.swing.JMenu();
        UsrManagement = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(600, 400));
        setResizable(false);

        ActShowTable.setFont(new java.awt.Font("宋体", 0, 13)); // NOI18N
        DefaultTableModel model =new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                        "ID", "Name", "Desc", "Time", "Remain", "Status", "Joined"
                }
        ) {
            Class[] types = new Class [] {
                    java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                    false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        ActShowTable.setModel(model);
        AdminActTableScroll.setViewportView(ActShowTable);
        if (ActShowTable.getColumnModel().getColumnCount() > 0) {
            ActShowTable.getColumnModel().getColumn(0).setPreferredWidth(30);
            ActShowTable.getColumnModel().getColumn(1).setPreferredWidth(80);
            ActShowTable.getColumnModel().getColumn(2).setPreferredWidth(200);
            ActShowTable.getColumnModel().getColumn(3).setPreferredWidth(80);
            ActShowTable.getColumnModel().getColumn(4).setPreferredWidth(60);
            ActShowTable.getColumnModel().getColumn(5).setPreferredWidth(70);
            ActShowTable.getColumnModel().getColumn(6).setPreferredWidth(50);
        }
        ActShowTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);//不自动画框

        QueryActIDLabel.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        QueryActIDLabel.setText("活动ID:");

        QueryActIDText.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N

        QueryActNameLabel.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        QueryActNameLabel.setText("活动名称:");

        QueryActNameText.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        QueryActNameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QueryActNameTextActionPerformed(evt);
            }
        });

        QueryActTimeLabel.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        QueryActTimeLabel.setText("活动时间:");

        QueryActTimeText.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N

        QueryActStatusLabel.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        QueryActStatusLabel.setText("活动状态:");

        QueryActStatusCombox.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        QueryActStatusCombox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "未开始", "进行中", "已结束", "全部" }));
        QueryActStatusCombox.setSelectedIndex(3);

        /**
         * 打开这个页面是 先输出全部活动信息
         */
        {
            List<Activity> actList = actService.queryAct();
            int remainNum;
            String Status = new String();
            model.setRowCount(0);
            for (int i = 0; i < actList.size(); i++) {
                remainNum = Integer.valueOf(actList.get(i).getMaxNum()) - Integer.valueOf(actList.get(i).getCurrentNum());
                if (actList.get(i).getStatus().equals("0"))
                    Status = "未进行";
                else if (actList.get(i).getStatus().equals("1"))
                    Status = "正在进行";
                else if (actList.get(i).getStatus().equals("2"))
                    Status = "已结束";
                model.addRow(new Object[]{
                        actList.get(i).getId(),
                        actList.get(i).getName(),
                        actList.get(i).getDesc(),
                        actList.get(i).getTime(),
                        remainNum,
                        Status,
                        usrActService.UsrJoinedAct(actList.get(i))
                });
            }
        }
        jButton1.setBackground(new java.awt.Color(204, 204, 204));
        jButton1.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jButton1.setText("查询");
        jButton1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                List<Activity> actList =new ArrayList<Activity>();
                String Status = new String();
                int remainNum;
                if (QueryActIDText.getText().length()==0) {
                    //ID为空
                    if (QueryActNameText.getText().length()==0){
                        //ID为空 Name 为空
                        if (QueryActTimeText.getText().length()==0){
                            //Time为空
                            if (QueryActStatusCombox.getSelectedIndex()==3){
                                //全部
                                actList=actService.queryAct();
                                model.setRowCount(0);
                                for (int i = 0; i <actList.size() ; i++) {
                                    remainNum=Integer.valueOf(actList.get(i).getMaxNum())-Integer.valueOf(actList.get(i).getCurrentNum());
                                    if (actList.get(i).getStatus().equals("0"))
                                        Status="未进行";
                                    else if (actList.get(i).getStatus().equals("1"))
                                        Status="正在进行";
                                    else if (actList.get(i).getStatus().equals("2"))
                                        Status="已结束";
                                    model.addRow(new Object[]{
                                            actList.get(i).getId(),
                                            actList.get(i).getName(),
                                            actList.get(i).getDesc(),
                                            actList.get(i).getTime(),
                                            remainNum,
                                            Status,
                                            usrActService.UsrJoinedAct(actList.get(i))
                                    });
                                }
                            }else{
                                //没选全部
                                actList=actService.queryActByStatus(String.valueOf(QueryActStatusCombox.getSelectedIndex()));
                                model.setRowCount(0);
                                for (int i = 0; i <actList.size() ; i++) {
                                    remainNum=Integer.valueOf(actList.get(i).getMaxNum())-Integer.valueOf(actList.get(i).getCurrentNum());
                                    if (actList.get(i).getStatus().equals("0"))
                                        Status="未进行";
                                    else if (actList.get(i).getStatus().equals("1"))
                                        Status="正在进行";
                                    else if (actList.get(i).getStatus().equals("2"))
                                        Status="已结束";
                                    model.addRow(new Object[]{
                                            actList.get(i).getId(),
                                            actList.get(i).getName(),
                                            actList.get(i).getDesc(),
                                            actList.get(i).getTime(),
                                            remainNum,
                                            Status,
                                            usrActService.UsrJoinedAct(actList.get(i))
                                    });
                                }
                            }
                        }else {
                            //ID Name 空    Time  不空
                            actList=actService.queryActByDate(QueryActTimeText.getText());
                            model.setRowCount(0);
                            for (int i = 0; i <actList.size() ; i++) {
                                remainNum=Integer.valueOf(actList.get(i).getMaxNum())-Integer.valueOf(actList.get(i).getCurrentNum());
                                if (actList.get(i).getStatus().equals("0"))
                                    Status="未进行";
                                else if (actList.get(i).getStatus().equals("1"))
                                    Status="正在进行";
                                else if (actList.get(i).getStatus().equals("2"))
                                    Status="已结束";
                                model.addRow(new Object[]{
                                        actList.get(i).getId(),
                                        actList.get(i).getName(),
                                        actList.get(i).getDesc(),
                                        actList.get(i).getTime(),
                                        remainNum,
                                        Status,
                                        usrActService.UsrJoinedAct(actList.get(i))
                                });
                            }
                        }
                    }else {
                        //ID空  Name 不空
                        actList=actService.queryActByName(QueryActNameText.getText());
                        model.setRowCount(0);
                        for (int i = 0; i <actList.size() ; i++) {
                            remainNum=Integer.valueOf(actList.get(i).getMaxNum())-Integer.valueOf(actList.get(i).getCurrentNum());
                            if (actList.get(i).getStatus().equals("0"))
                                Status="未进行";
                            else if (actList.get(i).getStatus().equals("1"))
                                Status="正在进行";
                            else if (actList.get(i).getStatus().equals("2"))
                                Status="已结束";
                            model.addRow(new Object[]{
                                    actList.get(i).getId(),
                                    actList.get(i).getName(),
                                    actList.get(i).getDesc(),
                                    actList.get(i).getTime(),
                                    remainNum,
                                    Status,
                                    usrActService.UsrJoinedAct(actList.get(i))
                            });
                        }
                    }
                }else{
                    //ID 不为空
                    actList=actService.queryActById(QueryActIDText.getText());
                    model.setRowCount(0);
                    for (int i = 0; i <actList.size() ; i++) {
                        remainNum=Integer.valueOf(actList.get(i).getMaxNum())-Integer.valueOf(actList.get(i).getCurrentNum());
                        if (actList.get(i).getStatus().equals("0"))
                            Status="未进行";
                        else if (actList.get(i).getStatus().equals("1"))
                            Status="正在进行";
                        else if (actList.get(i).getStatus().equals("2"))
                            Status="已结束";
                        model.addRow(new Object[]{
                                actList.get(i).getId(),
                                actList.get(i).getName(),
                                actList.get(i).getDesc(),
                                actList.get(i).getTime(),
                                remainNum,
                                Status,
                                usrActService.UsrJoinedAct(actList.get(i))
                        });
                    }
                }
            }
        });

        UsrEditAct.setText("活动");

        UsrQueryAct.setText("活动查询");
        UsrQueryAct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsrQueryActActionPerformed(evt);
            }
        });
        UsrEditAct.add(UsrQueryAct);

        UsrQuitAct.setText("活动编辑");
        UsrQuitAct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsrQuitActActionPerformed(evt);
            }
        });
        UsrEditAct.add(UsrQuitAct);

        AdminMenu.add(UsrEditAct);

        UsrMenu.setText("用户");

        UsrQuitSystem.setText("注销");
        UsrQuitSystem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsrQuitSystemActionPerformed(evt);
            }
        });
        UsrMenu.add(UsrQuitSystem);

        AdminMenu.add(UsrMenu);

        ActManagementMenu.setText("活动管理");

        AddAct.setText("新增活动");
        AddAct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActActionPerformed(evt);
            }
        });
        ActManagementMenu.add(AddAct);

        editAct.setText("编辑活动");
        editAct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActActionPerformed(evt);
            }
        });
        ActManagementMenu.add(editAct);

        AdminMenu.add(ActManagementMenu);

        UsrManagementMenu.setText("用户管理");

        UsrManagement.setText("用户管理");
        UsrManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsrManagementActionPerformed(evt);
            }
        });
        UsrManagementMenu.add(UsrManagement);

        AdminMenu.add(UsrManagementMenu);

        setJMenuBar(AdminMenu);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(31, 31, 31)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(layout.createSequentialGroup()
                                .add(QueryActTimeLabel)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(QueryActTimeText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(QueryActNameLabel)
                                    .add(QueryActIDLabel))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(QueryActNameText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                                    .add(QueryActIDText))))
                        .add(66, 66, 66)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .add(QueryActStatusLabel)
                                .add(18, 18, 18)
                                .add(QueryActStatusCombox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(AdminActTableScroll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 580, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(AdminActTableScroll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 196, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(QueryActIDLabel)
                    .add(QueryActIDText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(QueryActStatusLabel)
                    .add(QueryActStatusCombox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(QueryActNameLabel)
                    .add(QueryActNameText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(QueryActTimeLabel)
                    .add(QueryActTimeText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton1))
                .add(0, 44, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void QueryActNameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QueryActNameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_QueryActNameTextActionPerformed

    private void UsrQueryActActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsrQueryActActionPerformed
        // TODO add your handling code here:
        //this.dispose();
        //new QueryActUI().setVisible(true);
    }//GEN-LAST:event_UsrQueryActActionPerformed

    private void UsrQuitActActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsrQuitActActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new EditActUI().setVisible(true);
    }//GEN-LAST:event_UsrQuitActActionPerformed

    private void UsrQuitSystemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsrQuitSystemActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new LoginUI().setVisible(true);
    }//GEN-LAST:event_UsrQuitSystemActionPerformed

    private void AddActActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new AdminAddActUI().setVisible(true);
    }//GEN-LAST:event_AddActActionPerformed

    private void editActActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new AdminEditActUI().setVisible(true);
    }//GEN-LAST:event_editActActionPerformed

    private void UsrManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsrManagementActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new UsrManageUI().setVisible(true);
    }//GEN-LAST:event_UsrManagementActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QueryActUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QueryActUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QueryActUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QueryActUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QueryActUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu ActManagementMenu;
    private javax.swing.JTable ActShowTable;
    private javax.swing.JMenuItem AddAct;
    private javax.swing.JScrollPane AdminActTableScroll;
    private javax.swing.JMenuBar AdminMenu;
    private javax.swing.JLabel QueryActIDLabel;
    private javax.swing.JTextField QueryActIDText;
    private javax.swing.JLabel QueryActNameLabel;
    private javax.swing.JTextField QueryActNameText;
    private javax.swing.JComboBox<String> QueryActStatusCombox;
    private javax.swing.JLabel QueryActStatusLabel;
    private javax.swing.JLabel QueryActTimeLabel;
    private javax.swing.JTextField QueryActTimeText;
    private javax.swing.JMenu UsrEditAct;
    private javax.swing.JMenuItem UsrManagement;
    private javax.swing.JMenu UsrManagementMenu;
    private javax.swing.JMenu UsrMenu;
    private javax.swing.JMenuItem UsrQueryAct;
    private javax.swing.JMenuItem UsrQuitAct;
    private javax.swing.JMenuItem UsrQuitSystem;
    private javax.swing.JMenuItem editAct;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables

}
